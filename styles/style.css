* {
  font-family: "roboto";
  color: rgba(255, 255, 255, 0.623);
  transition: 0.5s;
  box-sizing: border-box;
}

/* width */

::-webkit-scrollbar {
  width: 5px;
}

/* Track */

::-webkit-scrollbar-track {
  background: rgba(136, 136, 136, 0.186);
}

/* Handle */

::-webkit-scrollbar-thumb {
  background: rgba(136, 136, 136, 0.603);
  border-radius: 8px;
}

::placeholder {
  /* Chrome, Firefox, Opera, Safari 10.1+ */
  color: rgba(235, 235, 235, 0.345);
  opacity: 1; /* Firefox */
}

/*
Type Script Tool
--- Posible class entry
class Lol{
   name: string;
   created_date: string;
}

--- Posible class entry 2 
class Lol2{
    _name: string;
    _duration: number;
    _priority: number;
    _completed: boolean;
    createdDate: string = "";
    terminatedDate: string = "";
    ongoing: boolean = false;
    onPause: boolean = false;
    disabled: boolean = false;
}
*/

/*
 static fromJSON(projectJSON: any) {
        let project: Project = new Project();
        project.name = projectJSON.name;
        project.created_date = projectJSON.created_date;
        return project;
    }

    static fromJSONArray(projectJSONArray: any) {
        let projects: Project[] = [];
        for (const projectItem of projectJSONArray) {
            projects.push(this.fromJSON(projectItem));
        }
        return projects;
    }

    static toJSON(projectJSON: Project) {
        return {
            name: projectJSON.name,
            created_date: projectJSON.created_date
        };
    }

    static toJSONArray(projects: Project[]) {
        let projectsJSON:any = [];
        for (const projectItem of projects) {
            projects.push(this.toJSON(projectItem));
        }
        return projectsJSON;
    }





*/
